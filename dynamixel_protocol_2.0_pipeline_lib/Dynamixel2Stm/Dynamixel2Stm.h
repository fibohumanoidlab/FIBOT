/*
 * Dynamixel2Stm.h
 *
 *  Created on: Apr 1, 2023
 *      Author: imchin
 */

#ifndef DYNAMIXEL2STM_H_
#define DYNAMIXEL2STM_H_
#include "stm32f4xx_hal.h"
#include <cstring>

#define MAX_BUFFER_Tx 10
#define MAX_Pkg_Tx 100
#define MAX_BUFFER_Rx 255 //buffer Rx
#define TIME_OUT_Rx_Callback 100 // microsec
#define MAX_N_OF_DYNAMIXEL 3 //max N of dynamixel


class Dynamixel2Stm{
	public:
		Dynamixel2Stm();
		void begin(UART_HandleTypeDef* SerialObject);
		void register_ID(uint8_t* id);


		void Spin();
		void Spin_RxIT();


		void torqueOn(uint8_t id);
		void torqueOff(uint8_t id);

		void ping(uint8_t id);
		uint8_t ping_result[MAX_N_OF_DYNAMIXEL]={0};

		void led(uint8_t id,uint8_t state);
		uint8_t led_state[MAX_N_OF_DYNAMIXEL]={0};
		uint8_t _temp_led_state[MAX_N_OF_DYNAMIXEL]={0};

	private:
		UART_HandleTypeDef* _serial;  // Serial

		uint8_t _listID[MAX_N_OF_DYNAMIXEL]={0};

		uint8_t _buff_Tx[MAX_BUFFER_Tx][MAX_Pkg_Tx]={0}; // buffer to Tx
		uint8_t _len_buff_Tx[MAX_BUFFER_Tx]={0}; // len data to Tx
		uint8_t _flag_Tx[MAX_BUFFER_Tx]={0};   // flag send
		uint8_t _pos_flag_Tx = 0;   // pos to check index send
		uint8_t _Can_Tx = 1;  // flag recive done
		uint8_t _len_Rx_callback[MAX_BUFFER_Tx]={0};
		uint8_t _feedback_type[MAX_BUFFER_Tx]={0};

		uint32_t _timestampRxcallback=0;
		void _q_Tx(uint8_t* data,uint8_t len,uint8_t len_Rx_callback,uint8_t feedbacktype);
		void _readyTx();
		void _timeoutcallback_Rx();


		uint8_t _buff_Rx[MAX_BUFFER_Rx]={0};
		uint8_t _coutInto =0;
		uint8_t _countIn =0;
		void _countIN();

		// crc
		uint16_t _getcrc(uint16_t crc,uint8_t *data,uint16_t len);
		const uint16_t _CRC_16_TABLE[256] = {0x0000, 0x8005, 0x800F, 0x000A, 0x801B, 0x001E, 0x0014, 0x8011,0x8033, 0x0036, 0x003C, 0x8039, 0x0028, 0x802D, 0x8027, 0x0022,0x8063, 0x0066, 0x006C, 0x8069, 0x0078, 0x807D, 0x8077, 0x0072,0x0050, 0x8055, 0x805F, 0x005A, 0x804B, 0x004E, 0x0044, 0x8041,0x80C3, 0x00C6, 0x00CC, 0x80C9, 0x00D8, 0x80DD, 0x80D7, 0x00D2,0x00F0, 0x80F5, 0x80FF, 0x00FA, 0x80EB, 0x00EE, 0x00E4, 0x80E1,0x00A0, 0x80A5, 0x80AF, 0x00AA, 0x80BB, 0x00BE, 0x00B4, 0x80B1,0x8093, 0x0096, 0x009C, 0x8099, 0x0088, 0x808D, 0x8087, 0x0082,0x8183, 0x0186, 0x018C, 0x8189, 0x0198, 0x819D, 0x8197, 0x0192,0x01B0, 0x81B5, 0x81BF, 0x01BA, 0x81AB, 0x01AE, 0x01A4, 0x81A1,0x01E0, 0x81E5, 0x81EF, 0x01EA, 0x81FB, 0x01FE, 0x01F4, 0x81F1,0x81D3, 0x01D6, 0x01DC, 0x81D9, 0x01C8, 0x81CD, 0x81C7, 0x01C2,0x0140, 0x8145, 0x814F, 0x014A, 0x815B, 0x015E, 0x0154, 0x8151,0x8173, 0x0176, 0x017C, 0x8179, 0x0168, 0x816D, 0x8167, 0x0162,0x8123, 0x0126, 0x012C, 0x8129, 0x0138, 0x813D, 0x8137, 0x0132,0x0110, 0x8115, 0x811F, 0x011A, 0x810B, 0x010E, 0x0104, 0x8101,0x8303, 0x0306, 0x030C, 0x8309, 0x0318, 0x831D, 0x8317, 0x0312,0x0330, 0x8335, 0x833F, 0x033A, 0x832B, 0x032E, 0x0324, 0x8321,0x0360, 0x8365, 0x836F, 0x036A, 0x837B, 0x037E, 0x0374, 0x8371,0x8353, 0x0356, 0x035C, 0x8359, 0x0348, 0x834D, 0x8347, 0x0342,0x03C0, 0x83C5, 0x83CF, 0x03CA, 0x83DB, 0x03DE, 0x03D4, 0x83D1,0x83F3, 0x03F6, 0x03FC, 0x83F9, 0x03E8, 0x83ED, 0x83E7, 0x03E2,0x83A3, 0x03A6, 0x03AC, 0x83A9, 0x03B8, 0x83BD, 0x83B7, 0x03B2,0x0390, 0x8395, 0x839F, 0x039A, 0x838B, 0x038E, 0x0384, 0x8381,0x0280, 0x8285, 0x828F, 0x028A, 0x829B, 0x029E, 0x0294, 0x8291,0x82B3, 0x02B6, 0x02BC, 0x82B9, 0x02A8, 0x82AD, 0x82A7, 0x02A2,0x82E3, 0x02E6, 0x02EC, 0x82E9, 0x02F8, 0x82FD, 0x82F7, 0x02F2,0x02D0, 0x82D5, 0x82DF, 0x02DA, 0x82CB, 0x02CE, 0x02C4, 0x82C1,0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252,0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202};
		uint16_t _crc=0;
		// end crc

		void _protocol();
		uint8_t _posdata=0;
		uint8_t _posdatapre=0;
		uint8_t _state=0;
		uint8_t _onId=0;
		uint16_t _grabN=0;
		enum{
			H1,H2,H3,RSRV,PKG_ID,N_L,N_H,INST,ERR,GRABN,CRC_L,CRC_H
		};
		enum {
			I_OK=0x55
		};
		enum{
			F_PING,F_LED
		};
		uint8_t _onInst = 0;
		uint16_t _onGrab =0;
		uint16_t _countGrab=0;
		uint16_t _crcIn=0;
		uint8_t _flagcrc=0;
		uint8_t _onfeedback=0;


};



#endif /* DYNAMIXEL2STM_H_ */
